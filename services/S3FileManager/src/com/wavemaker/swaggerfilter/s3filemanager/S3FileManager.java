/*Generated by WaveMaker Studio*/
package com.wavemaker.swaggerfilter.s3filemanager;

import javax.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import com.wavemaker.runtime.security.SecurityService;
import com.wavemaker.runtime.service.annotations.ExposeToClient;
import com.wavemaker.runtime.service.annotations.HideFromClient;
import org.springframework.beans.factory.annotation.Value;
import com.wavemaker.connector.awss3connector.S3Connector;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import com.wavemaker.runtime.commons.file.model.DownloadResponse;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import com.wavemaker.connector.awss3connector.AWSS3ObjectSummary;
import java.util.List;

import com.wavemaker.swaggerfilter.model.FileDetails;

/**
 * This is a singleton class with all its public methods exposed as REST APIs via the generated controller class.
 * To avoid exposing an API for a particular public method, annotate it with @HideFromClient.
 *
 * Method names will play a major role in defining the HTTP Method for the generated APIs. For example, a method name
 * that starts with delete/remove will make the API exposed as HTTP Method "DELETE".
 *
 * Method Parameters of type primitives (including java.lang.String) will be exposed as Query Parameters &
 * Complex Types/Objects will become part of the Request body in the generated API.
 *
 * NOTE: We do not recommend using method overloading on client-exposed methods.
 */
@ExposeToClient
public class S3FileManager {

    private static final Logger logger = LoggerFactory.getLogger(S3FileManager.class);

    @Autowired
    private SecurityService securityService;
    @Autowired
    private S3Connector s3Connector;
    
    @Value("${connector.aws-s3-connector.default.aws.bucketName}")
    private String S3_BUCKET_NAME;
    
    @Value("${app.environment.s3.region.domain}")
    private String S3_DOMAIN_REGION_NAME;
    
    @Value("${app.environment.file.prefix}")
    private String FILE_PREFIX;

    public FileDetails uploadSwaggerFileToS3(MultipartFile file) {
        logger.info("*****upload file start****" + file);
        String prefix = "swaggerfilter";
        try {
            
            logger.info("*****file.getInputStream()****" + file.getInputStream());
            logger.info("*****file.getOriginalFilename()****" + file.getOriginalFilename());
            s3Connector.uploadFileToS3(file.getInputStream(), FILE_PREFIX + "/" + file.getOriginalFilename(), null);
            String uploadImageUrl = "https://" + S3_BUCKET_NAME + "." + S3_DOMAIN_REGION_NAME + "/" + FILE_PREFIX + "/" + file.getOriginalFilename();
            return new FileDetails(file.getOriginalFilename(), uploadImageUrl);
            } catch (IOException e) {
                throw new RuntimeException("Exception occurred while uploading file: " + e);
            }
        }


    public void deleteFile(String s3KeyName) {
        logger.info("*****deleteFile start****");
        s3Connector.deleteFile(s3KeyName);
    }

    public List<AWSS3ObjectSummary> listObjects() {
        return s3Connector.listS3Objects();
    }

    public DownloadResponse downloadFile(String s3KeyName) {
        logger.info("*****downloadFile start****");
        try {
            OutputStream data = s3Connector.downloadFile(s3KeyName);
            DownloadResponse downloadResponse = new DownloadResponse();
            ByteArrayOutputStream outStream = (ByteArrayOutputStream) data;
            downloadResponse.setContents(new ByteArrayInputStream(outStream.toByteArray()));
            downloadResponse.setInline(false);
            downloadResponse.setFileName(s3KeyName);
            return downloadResponse;
        } catch (IOException e) {
            throw new RuntimeException("Exception occurred while downloading file" + e);
        }
    }

}
